continue
session[:userinfo]
continue
Note.where(user: user).where.not(date_seen: Date.today).sort_by(&:showing_order).reverse.length
Note.where(user: user).where.not(date_seen: Date.today).sort_by(&:showing_order).reverse
Note.where(user: user).where.not(date_seen: Date.today).sort_by(&:showing_order).reverse.reject!{ |n| n['priority'] == 0}
Note.where(user: user).where.not(date_seen: Date.today).sort_by(&:showing_order).reverse.reject{ |n| n['priority'] == 0}
Note.where(user: user).where.not(date_seen: Date.today).sort_by(&:showing_order)
Note.where(user: user).where.not(date_seen: Date.today).sort_by(&:showing_order).reverse.reject!{ |n| n['priority'] == 0}
whereami
Note.where(user: user).where.not(date_seen: Date.today).sort_by(&:showing_order).reverse
Note.where(user: user).where.not(date_seen: Date.today).sort_by(&:showing_order)
Note.where(user: user).where.not(date_seen: Date.today)
Note.where(user: user).where.not(date:seen: Date.today)
Note.where(user: user)
note
next
note
continue
priority_notes
next
continue
user.loggedIn ||= true
user.user_metadata.loggedIn = true
user.user_metadata.loggedIn ||= true
user.hello = "what"
user
user = session[:userinfo]
session[:userinfo]
exit
user.hasLoggedIn
user.hasLoggedIn = true
user.user_metadata
user.user_metadata = "hello"
user
user = session[:userinfo]
session[:userinfo].user_metadata
user
exit
session[:userinfo]
session[:userinfo][:info]
session[:info]
session[:userinfo]
session
session[:user]
session[:userinfo]
exit
Note.where("date_show = ?", Date.today)
Note.where("date_show > ?", Date.today)
Note.where("date_show < ?", Date.today)
Note.where.not(date_show: nil)
Note.where.not(date_seen: Date.today)
Note.where(user: user)
exit
note
next
note
exit
note
next
note
next
note
exit
notes
continue
next
notes.where.not(date_seen: Date.today)
notes = Note.where(user: user)
Note.where(user: user)
get_priority_notes(user)
user
exit
session[:userinfo]['uid']
session[:userinfo].uid
session[:userinfo][:uid]
session[:userinfo][:info]
session[:userinfo]
exit
priority
exit
title
priority
exit
title
priority
exit
priority
exit
title
priority
exit
note.length
note.reject! { |n| n['priority'] == nil }
note.select { |n| n['priority'] == nil }
note.length
note.reject { |n| n['priority'] == nil }
note.length
note.lenth
note
exit
note.reject { |n| n['priority'] == nil }
note.reject { |n| n[priority] == nil }
note[0].priority
note[0]
note
