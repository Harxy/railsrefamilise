exit
@all_tags_names = @all_tags.map{ |t| t.name }
@all_tags
exit
tags
tags = @all_tags.sort_by {|t| t.name }
@all_tags.first.name
@all_tags.first
@all_tags
exit
ecit
note
continue
@user_info.tag(@note, :with => tag_params, :on => :tags)
tag_params
continue
@user_info.tag(@note, :with => tag_params, :on => :tags)
@user_info
tag_params
@note
continue
session[:userinfo]['extras']['identities']
session[:userinfo]['identities']
session[:userinfo]['extras']
session[:userinfo]['info']
session[:userinfo]
session
continue
@note.taggings.each { |tag| tag.update_attributes(:tagger_id => current_user) }
session[:userinfo]['extra']['raw_info']['identities'][0]['user_id']
session[:userinfo]['extra']['raw_info']['identities'][0]
session[:userinfo]['extra']['raw_info']['identities'][:user_id]
session[:userinfo]['extra']['raw_info']['identities']['provider']
session[:userinfo]['extra']['raw_info']['identities']
session[:userinfo]['extra']['raw_info']['identities']['user_id']
session[:userinfo]['extra']['raw_info']['user_id']
session[:userinfo]['extra']['user_id']
session[:userinfo]['extra']
session[:userinfo]['info']
pp session[:userinfo].inspect
session[:userinfo].inspect
pp session[:userinfo]
print session[:userinfo]
session[:userinfo]['extra']['identities']
session[:userinfo]['identities']
session[:userinfo]
@note.taggings.each { |tag| tag.update_attributes(:tagger_id => current_user) }
@note.taggings.each do |tag|
@note.taggings.each |tag|
current_user
@note.save
current_user
@note.taggings.first
@note.taggings
continue
@note.taggings.first.update_attributes(:tagger_id => current_user)
@note.taggings
@note.taggings.update_attributes(:tagger_id => current_user)
@note.taggings.tagger_id
@note.taggings
@note
@note.save
@note.sace
@note.tags
@note.taggings.tagger_id = current_user
@note.taggings.tagger_id
@note.taggings
@note.taggin
@note
continue
@taggings = ActsAsTaggableOn::Tagging.all
continue
tagging_list = @taggings.taggable
@taggings.first.taggable
@taggings.first.note
@taggings.first.tag.taggable_id
@taggings.first.tag.Note
@taggings.first.tag.taggable
@taggings.first.tag.note
@taggings.first.tag
@taggings.first
@taggings = ActsAsTaggableOn::Tagging.all
@tags.first.note
@tags.first
@tags = ActsAsTaggableOn::Tag.all
@tags
continue
user_info.first.user_id
user_info.first
user_info.user_id
user_info
continue
add_user_info
empty_database?
session[:userinfo]
continue
session[:userinfo]['user_metadata']
session[:userinfo]
continue
@note.save
@note.tag_list = @note.tag_list.split(',')
@note.tag_list.add
@note.tag_list
@note.tag_list.split!(',')
@note.tag_list.split(',')
@note.tag_list.join(',')
@note.tag_list.to_array
@note.tag_list.to_a
@note.tag_list
note_params
continue
note_params
continue
@note.tag_list
@note
continue
@note.tag_list.add(note_params)
@note.tag_list.add
@note.tag_list
note_params
@note
continue
session[:userinfo]['user_metadata']
session[:userinfo]
continue
note
note.update_attributes(:date_show => nil, :priority => 0)
   22:                            :priority => 0)
note.update_attributes(:date_show => nil,
note
continue
session[:userinfo]
continue
Note.where(user: user).where.not(date_seen: Date.today).sort_by(&:showing_order).reverse.length
Note.where(user: user).where.not(date_seen: Date.today).sort_by(&:showing_order).reverse
Note.where(user: user).where.not(date_seen: Date.today).sort_by(&:showing_order).reverse.reject!{ |n| n['priority'] == 0}
Note.where(user: user).where.not(date_seen: Date.today).sort_by(&:showing_order).reverse.reject{ |n| n['priority'] == 0}
Note.where(user: user).where.not(date_seen: Date.today).sort_by(&:showing_order)
Note.where(user: user).where.not(date_seen: Date.today).sort_by(&:showing_order).reverse.reject!{ |n| n['priority'] == 0}
whereami
Note.where(user: user).where.not(date_seen: Date.today).sort_by(&:showing_order).reverse
Note.where(user: user).where.not(date_seen: Date.today).sort_by(&:showing_order)
Note.where(user: user).where.not(date_seen: Date.today)
Note.where(user: user).where.not(date:seen: Date.today)
Note.where(user: user)
note
next
note
continue
priority_notes
next
continue
user.loggedIn ||= true
user.user_metadata.loggedIn = true
user.user_metadata.loggedIn ||= true
user.hello = "what"
user
user = session[:userinfo]
session[:userinfo]
exit
user.hasLoggedIn
user.hasLoggedIn = true
user.user_metadata
user.user_metadata = "hello"
user
user = session[:userinfo]
session[:userinfo].user_metadata
user
exit
session[:userinfo]
session[:userinfo][:info]
session[:info]
session[:userinfo]
session
session[:user]
session[:userinfo]
exit
Note.where("date_show = ?", Date.today)
Note.where("date_show > ?", Date.today)
Note.where("date_show < ?", Date.today)
Note.where.not(date_show: nil)
Note.where.not(date_seen: Date.today)
Note.where(user: user)
exit
note
next
note
exit
note
next
note
next
note
exit
notes
continue
next
notes.where.not(date_seen: Date.today)
notes = Note.where(user: user)
Note.where(user: user)
get_priority_notes(user)
user
exit
session[:userinfo]['uid']
session[:userinfo].uid
session[:userinfo][:uid]
session[:userinfo][:info]
session[:userinfo]
exit
priority
exit
title
priority
exit
title
priority
exit
priority
exit
title
priority
exit
note.length
note.reject! { |n| n['priority'] == nil }
note.select { |n| n['priority'] == nil }
note.length
note.reject { |n| n['priority'] == nil }
note.length
note.lenth
note
exit
note.reject { |n| n['priority'] == nil }
note.reject { |n| n[priority] == nil }
note[0].priority
note[0]
note
